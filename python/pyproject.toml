[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "multiplatform-code-generator"
version = "1.0.0"
description = "MCP tool for generating cross-platform code from C++ interfaces"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Multiplatform Code Generator Team" },
]
keywords = ["mcp", "cross-platform", "code-generation", "cpp", "android", "ios", "harmony"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "mcp>=1.0.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.0.0",
    "mypy>=1.0.0",
    "flake8>=5.0.0",
]

[project.urls]
Homepage = "https://github.com/yourorg/multiplatform-code-generator"
Repository = "https://github.com/yourorg/multiplatform-code-generator"
Issues = "https://github.com/yourorg/multiplatform-code-generator/issues"
Documentation = "https://github.com/yourorg/multiplatform-code-generator#readme"

[project.scripts]
multiplatform-code-generator = "multiplatform_code_generator.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src/multiplatform_code_generator"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/LICENSE",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["multiplatform_code_generator"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"
